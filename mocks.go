// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jfk9w-go/libdns-selectel (interfaces: DNSClient,Client,Listable)
//
// Generated by this command:
//
//	mockgen -destination mocks.go -package selectel . DNSClient,Client,Listable
//

// Package selectel is a generated GoMock package.
package selectel

import (
	context "context"
	reflect "reflect"

	v2 "github.com/selectel/domains-go/pkg/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockDNSClient is a mock of DNSClient interface.
type MockDNSClient struct {
	ctrl     *gomock.Controller
	recorder *MockDNSClientMockRecorder
	isgomock struct{}
}

// MockDNSClientMockRecorder is the mock recorder for MockDNSClient.
type MockDNSClientMockRecorder struct {
	mock *MockDNSClient
}

// NewMockDNSClient creates a new mock instance.
func NewMockDNSClient(ctrl *gomock.Controller) *MockDNSClient {
	mock := &MockDNSClient{ctrl: ctrl}
	mock.recorder = &MockDNSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDNSClient) EXPECT() *MockDNSClientMockRecorder {
	return m.recorder
}

// CreateRRSet mocks base method.
func (m *MockDNSClient) CreateRRSet(ctx context.Context, zoneID string, rrset v2.Creatable) (*v2.RRSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRRSet", ctx, zoneID, rrset)
	ret0, _ := ret[0].(*v2.RRSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRRSet indicates an expected call of CreateRRSet.
func (mr *MockDNSClientMockRecorder) CreateRRSet(ctx, zoneID, rrset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRRSet", reflect.TypeOf((*MockDNSClient)(nil).CreateRRSet), ctx, zoneID, rrset)
}

// DeleteRRSet mocks base method.
func (m *MockDNSClient) DeleteRRSet(ctx context.Context, zoneID, rrsetid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRRSet", ctx, zoneID, rrsetid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRRSet indicates an expected call of DeleteRRSet.
func (mr *MockDNSClientMockRecorder) DeleteRRSet(ctx, zoneID, rrsetid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRRSet", reflect.TypeOf((*MockDNSClient)(nil).DeleteRRSet), ctx, zoneID, rrsetid)
}

// ListRRSets mocks base method.
func (m *MockDNSClient) ListRRSets(ctx context.Context, zoneID string, params *map[string]string) (Listable[v2.RRSet], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRRSets", ctx, zoneID, params)
	ret0, _ := ret[0].(Listable[v2.RRSet])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRRSets indicates an expected call of ListRRSets.
func (mr *MockDNSClientMockRecorder) ListRRSets(ctx, zoneID, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRRSets", reflect.TypeOf((*MockDNSClient)(nil).ListRRSets), ctx, zoneID, params)
}

// ListZones mocks base method.
func (m *MockDNSClient) ListZones(ctx context.Context, params *map[string]string) (Listable[v2.Zone], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListZones", ctx, params)
	ret0, _ := ret[0].(Listable[v2.Zone])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListZones indicates an expected call of ListZones.
func (mr *MockDNSClientMockRecorder) ListZones(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListZones", reflect.TypeOf((*MockDNSClient)(nil).ListZones), ctx, params)
}

// UpdateRRSet mocks base method.
func (m *MockDNSClient) UpdateRRSet(ctx context.Context, zoneID, rrsetid string, rrset v2.Updatable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRRSet", ctx, zoneID, rrsetid, rrset)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRRSet indicates an expected call of UpdateRRSet.
func (mr *MockDNSClientMockRecorder) UpdateRRSet(ctx, zoneID, rrsetid, rrset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRRSet", reflect.TypeOf((*MockDNSClient)(nil).UpdateRRSet), ctx, zoneID, rrsetid, rrset)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateRRSet mocks base method.
func (m *MockClient) CreateRRSet(ctx context.Context, zone string, set *RRSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRRSet", ctx, zone, set)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRRSet indicates an expected call of CreateRRSet.
func (mr *MockClientMockRecorder) CreateRRSet(ctx, zone, set any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRRSet", reflect.TypeOf((*MockClient)(nil).CreateRRSet), ctx, zone, set)
}

// DeleteRRSet mocks base method.
func (m *MockClient) DeleteRRSet(ctx context.Context, zone, setID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRRSet", ctx, zone, setID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRRSet indicates an expected call of DeleteRRSet.
func (mr *MockClientMockRecorder) DeleteRRSet(ctx, zone, setID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRRSet", reflect.TypeOf((*MockClient)(nil).DeleteRRSet), ctx, zone, setID)
}

// GetRRSets mocks base method.
func (m *MockClient) GetRRSets(ctx context.Context, zone string) (map[RRSetKey]*RRSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRRSets", ctx, zone)
	ret0, _ := ret[0].(map[RRSetKey]*RRSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRRSets indicates an expected call of GetRRSets.
func (mr *MockClientMockRecorder) GetRRSets(ctx, zone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRRSets", reflect.TypeOf((*MockClient)(nil).GetRRSets), ctx, zone)
}

// GetZones mocks base method.
func (m *MockClient) GetZones(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZones", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZones indicates an expected call of GetZones.
func (mr *MockClientMockRecorder) GetZones(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZones", reflect.TypeOf((*MockClient)(nil).GetZones), ctx)
}

// UpdateRRSet mocks base method.
func (m *MockClient) UpdateRRSet(ctx context.Context, zone string, set *RRSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRRSet", ctx, zone, set)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRRSet indicates an expected call of UpdateRRSet.
func (mr *MockClientMockRecorder) UpdateRRSet(ctx, zone, set any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRRSet", reflect.TypeOf((*MockClient)(nil).UpdateRRSet), ctx, zone, set)
}

// MockListable is a mock of Listable interface.
type MockListable[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockListableMockRecorder[T]
	isgomock struct{}
}

// MockListableMockRecorder is the mock recorder for MockListable.
type MockListableMockRecorder[T any] struct {
	mock *MockListable[T]
}

// NewMockListable creates a new mock instance.
func NewMockListable[T any](ctrl *gomock.Controller) *MockListable[T] {
	mock := &MockListable[T]{ctrl: ctrl}
	mock.recorder = &MockListableMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListable[T]) EXPECT() *MockListableMockRecorder[T] {
	return m.recorder
}

// GetCount mocks base method.
func (m *MockListable[T]) GetCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCount indicates an expected call of GetCount.
func (mr *MockListableMockRecorder[T]) GetCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockListable[T])(nil).GetCount))
}

// GetItems mocks base method.
func (m *MockListable[T]) GetItems() []*T {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItems")
	ret0, _ := ret[0].([]*T)
	return ret0
}

// GetItems indicates an expected call of GetItems.
func (mr *MockListableMockRecorder[T]) GetItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockListable[T])(nil).GetItems))
}

// GetNextOffset mocks base method.
func (m *MockListable[T]) GetNextOffset() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextOffset")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetNextOffset indicates an expected call of GetNextOffset.
func (mr *MockListableMockRecorder[T]) GetNextOffset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextOffset", reflect.TypeOf((*MockListable[T])(nil).GetNextOffset))
}
